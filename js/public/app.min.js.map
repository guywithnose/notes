{"version":3,"sources":["app.js","controllers/appcontroller.js","controllers/notecontroller.js","controllers/notescontroller.js","directives/autofocus.js","directives/editor.js","directives/issaving.js","directives/timeoutchange.js","directives/tooltip.js","filters/and.js","filters/noteTitle.js","filters/wordCount.js","services/is.js","services/notesmodel.js","services/savequeue.js"],"names":["angular","$","requestToken","mdEdit","undefined","app","module","config","$provide","$routeProvider","RestangularProvider","$httpProvider","$windowProvider","defaults","headers","common","requesttoken","value","saveInterval","when","templateUrl","controller","resolve","note","$route","$q","is","Restangular","deferred","defer","noteId","current","params","loading","one","get","then","reject","promise","otherwise","redirectTo","baseUrl","OC","generateUrl","setBaseUrl","run","$rootScope","$location","NotesModel","attr","filePath","$on","notes","getAll","length","sorted","sort","a","b","modified","path","id","$scope","init","lastViewedNote","search","$routeParams","SaveQueue","updateIfExists","isSaving","updateTitle","jsonData","JSON","parse","content","title","e","split","t","save","add","route","notesResource","all","getList","addAll","create","post","remove","$emit","toggleFavorite","customPUT","favorite","directive","restrict","link","scope","element","focus","$timeout","editor","change","$apply","setValue","on","event","ctrlKey","url","this","find","text","window","open","$window","notesIsSaving","onbeforeunload","attributes","timeout","interval","bind","cancel","notesTimeoutChange","tooltip","filter","$filter","items","searchString","searchValues","filtered","i","trim","replace","wordCount","n","factory","notesIds","prototype","updated","isDefined","push","splice","_queue","_flushLock","_flush","keys","Object","self","requests","put","_noteUpdateRequest","response","jQuery","oc_requesttoken"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig(function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}).run(function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote) {\n        if(lastViewedNote !== 0) {\n            $location.path('/notes/' + lastViewedNote);\n        }\n    };\n\n    $scope.search = '';\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n\n    $scope.updateTitle = function () {\n        try {\n            var jsonData = JSON.parse($scope.note.content);\n            if (jsonData.title) {\n                $scope.note.title = jsonData.title;\n                return;\n            }\n        } catch (e) {\n        }\n\n        $scope.note.title = $scope.note.content.split('\\n')[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.save = function() {\n        var note = $scope.note;\n        SaveQueue.add(note);\n    };\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', function($routeParams, $scope, $location,\n                                           Restangular, NotesModel) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notes = NotesModel.getAll();\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n    });\n\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n    };\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n","/*global mdEdit*/\napp.directive('editor', ['$timeout', function ($timeout) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\t\t\tvar editor = mdEdit(element[0], {change: function(value) {\n\t\t\t\t$timeout(function(){\n\t\t\t\t\tscope.$apply(function() {\n\t\t\t\t\t\tscope.note.content = value;\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}});\n\t\t\teditor.setValue(scope.note.content);\n\t\t\telement.on('click', '.link', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = $(this).find('.link-params-inner').text();\n\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesIsSaving', function ($window) {\n    'use strict';\n    return {\n        restrict: 'A',\n        scope: {\n            'notesIsSaving': '='\n        },\n        link: function (scope) {\n            $window.onbeforeunload = function () {\n                if (scope.notesIsSaving) {\n                    return t('notes', 'Note is currently saving. Leaving ' +\n                                      'the page will delete all changes!');\n                } else {\n                    return null;\n                }\n            };\n        }\n    };\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/**\n * Like ng-change only that it does not fire when you type faster than\n * 300 ms\n */\napp.directive('notesTimeoutChange', function ($timeout) {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element, attributes) {\n            var interval = 300;  // 300 miliseconds timeout after typing\n            var timeout;\n\n            $(element).bind('input propertychange paste', function () {\n                $timeout.cancel(timeout);\n\n                timeout = $timeout(function () {\n                    scope.$apply(attributes.notesTimeoutChange);\n                }, interval);\n            });\n        }\n    };\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip();\n        }\n    };\n});\n","/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n","/**\n * removes whitespaces and leading #\n */\napp.filter('noteTitle', function () {\n\t'use strict';\n\treturn function (value) {\n\t\ttry {\n\t\t\tvar jsonData = JSON.parse(value);\n\t\t\tif (jsonData.title) {\n\t\t\t\treturn jsonData.title;\n\t\t\t}\n\t\t} catch (e) {\n\t\t}\n\n\t\tvalue = value.split('\\n')[0] || 'newNote';\n\t\treturn value.trim().replace(/^#+/g, '');\n\t};\n});\n","app.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                note.title = updated.title;\n                note.modified = updated.modified;\n                note.content = updated.content;\n                note.favorite = updated.favorite;\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        }\n    };\n\n    return new NotesModel();\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.title = response.title;\n            note.modified = response.modified;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        }\n    };\n\n    return new SaveQueue();\n});"]}